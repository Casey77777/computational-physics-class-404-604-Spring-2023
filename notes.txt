PROGRAMMING PRINCIPLES

	1. gives correct answer
	2. clear and easy to read code (i.e. it documents itself)
	3. easy to use
	4. built up out of small programs 
	5. easy to modify and robust

	Plan ahead! Use pseudocode if necessary.

PSEUDOCODE

	1. flow chart
	2. small codes
	3. put together
	4. test

EFFICIENT PROGRAM

	Example:

		How to calculate 9^23 efficiently?
			9 x 9 x 9 x ... x 9 = 9^32  (32 products)
			or
			((((9^2)^2)^2)^2)^2 = 9^32  (5 products)

DYNAMIC PROGRAMMING

	Break up a problem into a series of overlapping subproblems. 

	Methods:
		1. Memorization - catch the output of a function and store it 
						  if necessary. 
		2. Tabulation - bottom-up (store all sub-problems)

ABSOLUTE AND RELATIVE ERROR

	y is exact solution
	y_c is experiment/computer
	del = |y - y_c| is absolute error
	del_bar = del / |y| is relative error

	1 = 1 + eps
	y = y(1 + eps)
	  = y + y*eps
	del = |y - y_c|
	    = |y*eps|
	del_bar = del / |y|
	        = eps
	
ERROR OF OPERATION
	
	Sum:

		a,b,c (positive, exact)
		a',b',c' (positive, approximation)

		a = b + c
		b' = b(1 + eps_b)
		c' = c(1 + eps_c)
		a' = b' + c' 
		   = b + c + b*eps_b + c*eps_c
		   <= b + c + (b + c)*max(eps_b,eps_c)
		   = a + a*max(eps_b,eps_c)

		del_bar = |a'-a|/a
				<= max(eps_b,eps_c)

	Difference:

		a = b - c
		a' = b - c + b*eps_b - c*eps_c
		
		del_bar = |a'-a|/a
				= |b*eps_b - c*eps_c| / (b-c)

TRUNCATION ERROR

	1. truncating an infinite series with finite series

		Example:

			sin(x) = taylor_expansion_up_to_N_terms + err(x,N)

	2. discretization (e.g. Euler's method with finite steps)

SOLVING EQUATIONS

	Solving equation of the form f(x) = 0.

	1. Bisection

	2. Newton-Raphson method

		guess x0, f(x0) != 0, correction delta_x

		hoping that f(x0 + delta_x) = 0

		f(x0 + delta_x) is approx. f(x0) + f'(x0)delta_x + ... = 0

		Procedure:
			delta_x = -f(x0) / f'(x0)
			x0 = x0 + delta_x
			repeat

		Multiple Equations:

			Example:
			
				x1^2 + x1*x2 = 10
				x2 + 3*x1*x2^2 = 57

				fi(x1,x2,...,xN) = 0, i = 1,...,N

				vec_f(vec_x) = (f1(x1,x2), f2(x1,x2))
							 = (x1^2 + x1*x2, x2 + 3*x1*x2^2)
							 = (10, 57)

				guess x1, x2; correction delta_x1, delta_x2

				f1(x1+delta_x1, x2+delta_x2) = 0
				f2(x1+delta_x1, x2+delta_x2) = 0

				taylor expand

				f1(x1+delta_x1) ~ f1(x1,x2) + del_f1/del_x1*delta_x1 + 
								  del_f1/del_x2*delta_x2 = 0
				f2(x1+delta_x1) ~ f2(x1,x2) + del_f2/del_x1*delta_x1 + 
								  del_f2/del_x2*delta_x2 = 0

ORDINARY DIFFERENTIAL EQUATIONS	

	Convert any order ODE into first order by 
	redefining the variables

		Example:
			
			y'' = xsin(y)
			
			becomes the following system of two equations

			w' = xsin(y)
			w = y'

	ODEs can be written as:
		F(x,y(x),y'(x),y''(x),...,y^(n)(x)) = 0
	
	Explicit form:
		F(x,y(x),y'(x),y''(x),...,y^(n-1)(x)) = y^(n)(x)
	
	Linear ODEs have only single powers of y and its derivatives:
		a0(x)y + a1(x)y' + a2(x)y'' + ... + an(x)y^(n) = b(x)
	
	With numerical methods, ODEs must be first order in explicit form 
	but not necessarily linear. 

	Euler's Method:
		
		dy/dt ~ y(t_(i+1) - t_i) / delta_t
			  ~ F(t_i,y(t_i))

		so, 

		y(t_(i+1)) = delta_t * F(t_i,y(t_i)) + y(t_i)

BOUNDARY PROBLEMS

	For each first order ODE, there is an initial value condition or 
	boundary condition (e.g. two second order ODEs have four initial 
	value/boundary conditions).
	
	Boundary conditions can bound two points of the same variable 
	(e.g. y(0)=a, y(1)=b). 

	Shooting Method:
		
		Guess what initial value would achieve the required boundary
		condition and continually adjust the initial value to 
		converge onto the boundary condition. 

		With one initial value and one boundary condition, we can
		use bisection to adjust the initial value. 

		But for more than one initial value and more than one boundary
		condition, bisection becomes harder to implement. So, we can 
		use Newton-Raphson method. 

PARTIAL DIFFERENTIAL EQUATIONS

	There are three types of PDEs: elliptic, parabolic, and hyperbolic. 

	Heat equation is parabolic. 
	Poisson equation is elliptic. 
	Wave equation is hyperbolic. 

	To solve a PDE numerically, we can start by rewritting the 
	derivatives using their discrete counterparts. 

	Parabolic PDEs:

		For parabolic PDEs or diffusion type problems, we can use the FTCS 
		scheme. This is a type of explicit method since it uses values 
		from the past to determine values in the future. 

		Given a PDE and enough boundary conditions, we can use points from 
		the boundary to determine the next points inward and then use those 
		points to determine the next points inward etc. until all points 
		are determined. The shape created from connecting a set of known 
		points to the point that they will determine is called a STENCIL. 

		The stability condition can be determined by using seperation of 
		variables and plugging into the numerical equation: 
		T(x,t) = f(t)*e^(ikx(dx))

		The Crank-Nicolson method is a combination of an explicit and 
		implicit method as it uses values from the past and the future to 
		determine the points in between, similar to a central difference 
		scheme. For the heat equation, this method has no stability 
		condition. 

	Hyperbolic PDEs:

		An example of a hyperbolic PDE would be 
			
			dU/dt+vdU/dx = 0

		and plugging in a solution such as U(x,t) = sin(x-vt)
		would produce a propagating wave, so the PDE is known as 
		an ADVECTION equation. 

		For these types of PDEs, the FTCS scheme is always unstable. 

		There are two types of methods that are conditionally stable: 

			1. Lax-Friedrichs method
			2. Upwind method 
		
		Both are stable when the CFL condition is met. 
